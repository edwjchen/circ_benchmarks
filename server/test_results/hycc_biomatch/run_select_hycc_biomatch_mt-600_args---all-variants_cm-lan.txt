
LOG: ====================================

LOG: Benchmarking HyCC

LOG: ====================================

LOG: TEST: biomatch
LOG: MINIMIZATION_TIME: 600
LOG: COST_MODEL: lan
LOG: ARGUMENTS: ['--all-variants']

LOG: ====================================

LOG: MODE: selection
Directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_biomatch_mt-600_args---all-variants
match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>@arith.stats
graph.dot
match_fix@bool_depth.stats
mpc_main@bool_depth.circ
match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>@arith.circ
match_fix@arith.circ
match_fix@bool_size.stats
yaoonly.cmb
min_decomposed<int32[256],int32<256>>@bool_depth.circ
lan_optimized.cmb
all.cmb
match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>@bool_size.circ
mpc_main@arith.circ
min_decomposed<int32[256],int32<256>>@arith.stats
mpc_main@arith.stats
match_fix@bool_size.circ
min<int32[64],int32<64>,int32<1>>@bool_depth.circ
match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>@bool_size.stats
min<int32[4],int32<4>,int32<1>>@bool_depth.circ
mpc_main@bool_depth.stats
min<int32[4],int32<4>,int32<1>>@bool_size.circ
match_fix@bool_depth.circ
match_fix@arith.stats
min<int32[64],int32<64>,int32<1>>@bool_depth.stats
gmwhybrid.cmb
gmwonly.cmb
match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>@bool_depth.circ
mpc_main@bool_size.stats
match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>@bool_depth.stats
min<int32[4],int32<4>,int32<1>>@bool_depth.stats
min<int32[64],int32<64>,int32<1>>@bool_size.stats
mpc_main@bool_size.circ
min_decomposed<int32[256],int32<256>>@bool_size.stats
min_decomposed<int32[256],int32<256>>@arith.circ
min<int32[4],int32<4>,int32<1>>@bool_size.stats
min_decomposed<int32[256],int32<256>>@bool_depth.stats
yaohybrid.cmb
min_decomposed<int32[256],int32<256>>@bool_size.circ
min<int32[64],int32<64>,int32<1>>@bool_size.circ
Modules: 6

mpc_main
  Possible sharings: arith bool_depth bool_size
  Calls:
    match_decomposed<int32[256],int32[64],uint32<64>,int32[4]> x 4
    min_decomposed<int32[256],int32<256>> x 1

match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>
  Possible sharings: arith bool_depth bool_size
  Calls:
    match_fix x 64

match_fix
  Possible sharings: arith bool_depth bool_size
  Calls:

min_decomposed<int32[256],int32<256>>
  Possible sharings: arith bool_depth bool_size
  Calls:
    min<int32[64],int32<64>,int32<1>> x 4
    min<int32[4],int32<4>,int32<1>> x 1

min<int32[64],int32<64>,int32<1>>
  Possible sharings: bool_depth bool_size
  Calls:

min<int32[4],int32<4>,int32<1>>
  Possible sharings: bool_depth bool_size
  Calls:

Subgraphs:
  {'min<int32[4],int32<4>,int32<1>>', 'min_decomposed<int32[256],int32<256>>', 'min<int32[64],int32<64>,int32<1>>'}
  {'match_fix', 'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>'}

mpc_main Sharing.bool_depth

mpc_main Sharing.arith

mpc_main Sharing.bool_size

match_decomposed<int32[256],int32[64],uint32<64>,int32[4]> Sharing.arith

match_decomposed<int32[256],int32[64],uint32<64>,int32[4]> Sharing.bool_size

match_decomposed<int32[256],int32[64],uint32<64>,int32[4]> Sharing.bool_depth

match_fix Sharing.arith

match_fix Sharing.bool_size

match_fix Sharing.bool_depth

min_decomposed<int32[256],int32<256>> Sharing.bool_depth

min_decomposed<int32[256],int32<256>> Sharing.arith

min_decomposed<int32[256],int32<256>> Sharing.bool_size

min<int32[64],int32<64>,int32<1>> Sharing.bool_depth

min<int32[64],int32<64>,int32<1>> Sharing.bool_size

min<int32[4],int32<4>,int32<1>> Sharing.bool_depth

min<int32[4],int32<4>,int32<1>> Sharing.bool_size

LOG: Total number of modules: 6
LOG: Modules: ['mpc_main', 'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', 'match_fix', 'min_decomposed<int32[256],int32<256>>', 'min<int32[64],int32<64>,int32<1>>', 'min<int32[4],int32<4>,int32<1>>']
op: ('mpc_main', <Sharing.bool_depth: 2>) 0
op: ('mpc_main', <Sharing.arith: 1>) 0
op: ('mpc_main', <Sharing.bool_size: 3>) 0
op: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.arith: 1>) 0
op: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.bool_size: 3>) 0
op: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.bool_depth: 2>) 0
op: ('match_fix', <Sharing.arith: 1>) 0.38670000000000004
op: ('match_fix', <Sharing.bool_size: 3>) 5.1198
op: ('match_fix', <Sharing.bool_depth: 2>) 370.48449999999997
op: ('min_decomposed<int32[256],int32<256>>', <Sharing.bool_depth: 2>) 0
op: ('min_decomposed<int32[256],int32<256>>', <Sharing.arith: 1>) 0
op: ('min_decomposed<int32[256],int32<256>>', <Sharing.bool_size: 3>) 0
op: ('min<int32[64],int32<64>,int32<1>>', <Sharing.bool_depth: 2>) 828.4311
op: ('min<int32[64],int32<64>,int32<1>>', <Sharing.bool_size: 3>) 6.4008
op: ('min<int32[4],int32<4>,int32<1>>', <Sharing.bool_depth: 2>) 39.4491
op: ('min<int32[4],int32<4>,int32<1>>', <Sharing.bool_size: 3>) 0.3048
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_size: 3>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.bool_depth: 2>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_size: 3>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.bool_depth: 2>, 'mpc_main': <Sharing.arith: 1>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_size: 3>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.bool_depth: 2>}
{'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>': <Sharing.arith: 1>, 'match_fix': <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>': <Sharing.arith: 1>, 'min<int32[64],int32<64>,int32<1>>': <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>': <Sharing.arith: 1>, 'mpc_main': <Sharing.arith: 1>}
conv: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.bool_size: 3>, 'match_fix', <Sharing.bool_size: 3>) 0
conv: ('min_decomposed<int32[256],int32<256>>', <Sharing.bool_size: 3>, 'min<int32[4],int32<4>,int32<1>>', <Sharing.bool_size: 3>) 0
conv: ('min_decomposed<int32[256],int32<256>>', <Sharing.bool_size: 3>, 'min<int32[64],int32<64>,int32<1>>', <Sharing.bool_size: 3>) 0
conv: ('mpc_main', <Sharing.bool_size: 3>, 'min_decomposed<int32[256],int32<256>>', <Sharing.bool_size: 3>) 0
conv: ('mpc_main', <Sharing.bool_size: 3>, 'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.bool_size: 3>) 0
conv: ('mpc_main', <Sharing.bool_depth: 2>, 'min_decomposed<int32[256],int32<256>>', <Sharing.bool_size: 3>) 6.097099999999293
conv: ('mpc_main', <Sharing.arith: 1>, 'min_decomposed<int32[256],int32<256>>', <Sharing.bool_size: 3>) 1105.6386400000865
conv: ('min_decomposed<int32[256],int32<256>>', <Sharing.bool_depth: 2>, 'min<int32[4],int32<4>,int32<1>>', <Sharing.bool_size: 3>) 0.09357999999999986
conv: ('min_decomposed<int32[256],int32<256>>', <Sharing.arith: 1>, 'min<int32[4],int32<4>,int32<1>>', <Sharing.bool_size: 3>) 16.945519999999988
conv: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.bool_size: 3>, 'match_fix', <Sharing.arith: 1>) 18.19904
conv: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.bool_depth: 2>, 'match_fix', <Sharing.bool_size: 3>) 11.96928000000002
conv: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.bool_depth: 2>, 'match_fix', <Sharing.arith: 1>) 15.54944
conv: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.arith: 1>, 'match_fix', <Sharing.bool_size: 3>) 2168.9702400000065
conv: ('match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.arith: 1>, 'match_fix', <Sharing.arith: 1>) 0
conv: ('mpc_main', <Sharing.bool_size: 3>, 'match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>', <Sharing.arith: 1>) 58.342719999999716
conv: ('min_decomposed<int32[256],int32<256>>', <Sharing.bool_depth: 2>, 'min<int32[64],int32<64>,int32<1>>', <Sharing.bool_size: 3>) 5.98071999999976
num_skips 0
== Protocol selection ==

Cost: 12
  match_decomposed<int32[256],int32[64],uint32<64>,int32[4]>: Sharing.bool_size
  match_fix: Sharing.bool_size
  min<int32[4],int32<4>,int32<1>>: Sharing.bool_size
  min<int32[64],int32<64>,int32<1>>: Sharing.bool_size
  min_decomposed<int32[256],int32<256>>: Sharing.bool_size
  mpc_main: Sharing.bool_size


LOG: Time / Memory: 2.10 seconds 92776 kB
