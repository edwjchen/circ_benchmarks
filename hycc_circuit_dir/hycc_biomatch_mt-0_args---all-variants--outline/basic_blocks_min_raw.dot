digraph {
	3 [shape=box,label="ID=3, PostIDom=n/a\l\l"];
	5 [shape=box,label="ID=5, PostIDom=3\l\ldead\l%min = named_addr<int_t (*)(int_t *data, signed int len, signed int stride)> min\l%min::data = named_addr<int_t **> min::data\l%0 = load<int_t *> %min::data\l%min::len = named_addr<signed int *> min::len\l%1 = load<signed int> %min::len\l%min::stride = named_addr<signed int *> min::stride\l%2 = load<signed int> %min::stride\l%3 = shl<signed int> %2 (signed int)1\l%4 = call<int_t> %min %0 %1 %3\l%min::$tmp::return_value_min$1 = named_addr<int_t *> min::$tmp::return_value_min$1\lstore %min::$tmp::return_value_min$1 %4\ldead\l%min::$tmp::return_value_min$11 = named_addr<int_t *> min::$tmp::return_value_min$1\l%5 = load<int_t> %min::$tmp::return_value_min$11\l%min#return_value = named_addr<int_t *> min#return_value\lstore %min#return_value %5\ldead\ljump\l"];
	5 -> 3;
	7 [shape=box,label="ID=7, PostIDom=4\l\l%min::1::2::1::i = named_addr<signed int *> min::1::2::1::i\l%6 = load<signed int> %min::1::2::1::i\l%min::stride1 = named_addr<signed int *> min::stride\l%7 = load<signed int> %min::stride1\l%8 = shl<signed int> %7 (signed int)1\l%9 = add<signed int> %6 %8\l%min::1::2::1::i1 = named_addr<signed int *> min::1::2::1::i\lstore %min::1::2::1::i1 %9\ljump\l"];
	7 -> 4 [style=dashed];
	8 [shape=box,label="ID=8, PostIDom=7\l\l%min::data1 = named_addr<int_t **> min::data\l%10 = load<int_t *> %min::data1\l%min::1::2::1::i2 = named_addr<signed int *> min::1::2::1::i\l%11 = load<signed int> %min::1::2::1::i2\l%min::stride2 = named_addr<signed int *> min::stride\l%12 = load<signed int> %min::stride2\l%13 = add<signed int> %11 %12\l%14 = cast<signed long int> %13\l%15 = compute_addr<int_t *> %10 %14\l%16 = load<int_t> %15\l%min::data2 = named_addr<int_t **> min::data\l%17 = load<int_t *> %min::data2\l%min::1::2::1::i3 = named_addr<signed int *> min::1::2::1::i\l%18 = load<signed int> %min::1::2::1::i3\l%19 = cast<signed long int> %18\l%20 = compute_addr<int_t *> %17 %19\lstore %20 %16\ljump\l"];
	8 -> 7;
	6 [shape=box,label="ID=6, PostIDom=7\l\l%min::data3 = named_addr<int_t **> min::data\l%21 = load<int_t *> %min::data3\l%min::1::2::1::i4 = named_addr<signed int *> min::1::2::1::i\l%22 = load<signed int> %min::1::2::1::i4\l%min::stride3 = named_addr<signed int *> min::stride\l%23 = load<signed int> %min::stride3\l%24 = add<signed int> %22 %23\l%25 = cast<signed long int> %24\l%26 = compute_addr<int_t *> %21 %25\l%27 = load<int_t> %26\l%min::data4 = named_addr<int_t **> min::data\l%28 = load<int_t *> %min::data4\l%min::1::2::1::i5 = named_addr<signed int *> min::1::2::1::i\l%29 = load<signed int> %min::1::2::1::i5\l%30 = cast<signed long int> %29\l%31 = compute_addr<int_t *> %28 %30\l%32 = load<int_t> %31\l%33 = lt<_Bool> %27 %32\l%34 = l_not<_Bool> %33\lbranch %34\l"];
	6 -> 7;
	6 -> 8;
	4 [shape=box,label="ID=4, PostIDom=5\l\l%min::1::2::1::i6 = named_addr<signed int *> min::1::2::1::i\l%35 = load<signed int> %min::1::2::1::i6\l%min::stride4 = named_addr<signed int *> min::stride\l%36 = load<signed int> %min::stride4\l%37 = add<signed int> %35 %36\l%min::len1 = named_addr<signed int *> min::len\l%38 = load<signed int> %min::len1\l%39 = lt<_Bool> %37 %38\l%40 = l_not<_Bool> %39\lbranch %40\l"];
	4 -> 5;
	4 -> 6;
	1 [shape=box,label="ID=1, PostIDom=4\l\l%min::1::2::1::i7 = named_addr<signed int *> min::1::2::1::i\lstore %min::1::2::1::i7 (signed int)0\ljump\l"];
	1 -> 4;
	2 [shape=box,label="ID=2, PostIDom=3\l\l%min::data5 = named_addr<int_t **> min::data\l%41 = load<int_t *> %min::data5\l%42 = cast<signed long int> (signed int)0\l%43 = compute_addr<int_t *> %41 %42\l%44 = load<int_t> %43\l%min#return_value1 = named_addr<int_t *> min#return_value\lstore %min#return_value1 %44\ljump\l"];
	2 -> 3;
	0 [shape=box,label="ID=0, PostIDom=3\l\l%45 = (signed int)1\l%46 = (signed int)0\l%min::stride5 = named_addr<signed int *> min::stride\l%47 = load<signed int> %min::stride5\l%min::len2 = named_addr<signed int *> min::len\l%48 = load<signed int> %min::len2\l%49 = gt<_Bool> %47 %48\l%50 = l_not<_Bool> %49\lbranch %50\l"];
	0 -> 1;
	0 -> 2;
}
