
LOG: ====================================

LOG: Benchmarking HyCC

LOG: ====================================

LOG: TEST: gauss
LOG: MINIMIZATION_TIME: 9
LOG: COST_MODEL: hycc
LOG: ARGUMENTS: ['--all-variants']
LOG: MODE: compile
CBMC version 5.8 64-bit x86_64 linux
Parsing /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
Converting
Type-checking gauss
Adding CPROVER library (x86_64)
Removal of function pointers and virtual functions
Partial Inlining
Generic Property Instrumentation

Function "abs"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  abs::val(0): int32;
(out) abs#return_value(4): int32;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #2.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #3.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #4.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #5.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #6.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #7.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #8.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #9.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #10.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #11.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #12.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #13.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #14.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #15.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #16.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #17.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #18.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #19.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #20.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #21.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #22.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #23.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #24.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #25.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #26.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #27.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #28.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 186, depth: 35
Boolean:    gates: 186, Non-XOR gates: 61, Non-XOR depth: 31, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 92, depth: 32
Boolean:    gates: 92, Non-XOR gates: 61, Non-XOR depth: 31, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "abs"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  abs::val(0): int32;
(out) abs#return_value(4): int32;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #2.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #3.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #4.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #5.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #6.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #7.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #8.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #9.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #10.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #11.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #12.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #13.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #14.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #15.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #16.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #17.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #18.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #19.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #20.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #21.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #22.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #23.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #24.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #25.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 319, depth: 15
Boolean:    gates: 319, Non-XOR gates: 162, Non-XOR depth: 7, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 224, depth: 10
Boolean:    gates: 224, Non-XOR gates: 106, Non-XOR depth: 6, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "abs"
Time limit: 9
Starting Bounded Model Checking
!(val!0#0 >= 0)
not
  * type: bool
  0: >=
      * type: bool
      * #source_location: 
        * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
        * line: 33
        * function: abs
        * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
      0: symbol
          * type: signedbv
              * width: 32
              * #typedef: DT
              * #c_type: signed_int
          * identifier: abs::val!0#0
          * expression: symbol
              * type: signedbv
                  * width: 32
                  * #typedef: DT
                  * #c_type: signed_int
              * identifier: abs::val
              * #source_location: 
                * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                * line: 33
                * function: abs
                * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
              * #lvalue: 1
          * L0: 0
          * L2: 0
          * L1_object_identifier: abs::val!0
          * #SSA_symbol: 1
      1: constant
          * type: signedbv
              * width: 32
              * #typedef: DT
              * #c_type: signed_int
          * value: 00000000000000000000000000000000
          * #source_location: 
            * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
            * line: 33
            * function: abs
            * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
          * #base: 10

Function "fixedpt_mul_inner"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  fixedpt_mul_inner::a(0): int32;
(in)  fixedpt_mul_inner::b(0): int32;
(out) fixedpt_mul_inner#return_value(1): int64;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Stopping minimization due to time out.
Total:      gates: 11784, depth: 309
Boolean:    gates: 11784, Non-XOR gates: 4033, Non-XOR depth: 63, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 10152, depth: 309
Boolean:    gates: 10152, Non-XOR gates: 2869, Non-XOR depth: 63, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "fixedpt_mul_inner"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  fixedpt_mul_inner::a(0): int32;
(in)  fixedpt_mul_inner::b(0): int32;
(out) fixedpt_mul_inner#return_value(1): int64;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Stopping minimization due to time out.
Total:      gates: 12168, depth: 39
Boolean:    gates: 12168, Non-XOR gates: 4350, Non-XOR depth: 16, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 9537, depth: 39
Boolean:    gates: 9537, Non-XOR gates: 3196, Non-XOR depth: 16, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "fixedpt_mul_inner"
Time limit: 9
Starting Bounded Model Checking

Function "fixedpt_mul"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  fixedpt_mul::a(0): int32;
(in)  fixedpt_mul::b(0): int32;
(out) fixedpt_mul#return_value(1): int32;
Function call to "fixedpt_mul_inner"
(in)  fixedpt_mul_inner::a(1): int32;
(in)  fixedpt_mul_inner::b(1): int32;
(out) fixedpt_mul_inner#return_value(1): int64;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "fixedpt_mul"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  fixedpt_mul::a(0): int32;
(in)  fixedpt_mul::b(0): int32;
(out) fixedpt_mul#return_value(1): int32;
Function call to "fixedpt_mul_inner"
(in)  fixedpt_mul_inner::a(1): int32;
(in)  fixedpt_mul_inner::b(1): int32;
(out) fixedpt_mul_inner#return_value(1): int64;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "fixedpt_mul"
Time limit: 9
Starting Bounded Model Checking

Function "fixedpt_div"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  fixedpt_div::a(0): int32;
(in)  fixedpt_div::b(0): int32;
(out) fixedpt_div#return_value(1): int32;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Stopping minimization due to time out.
Total:      gates: 17394, depth: 6519
Boolean:    gates: 17394, Non-XOR gates: 4508, Non-XOR depth: 2298, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 12297, depth: 6197
Boolean:    gates: 12297, Non-XOR gates: 4279, Non-XOR depth: 2168, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "fixedpt_div"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  fixedpt_div::a(0): int32;
(in)  fixedpt_div::b(0): int32;
(out) fixedpt_div#return_value(1): int32;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Stopping minimization due to time out.
Total:      gates: 17560, depth: 6438
Boolean:    gates: 17560, Non-XOR gates: 4674, Non-XOR depth: 2217, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 12725, depth: 6159
Boolean:    gates: 12725, Non-XOR gates: 4444, Non-XOR depth: 2116, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "fixedpt_div"
Time limit: 9
Starting Bounded Model Checking

Function "mpc_main"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  mpc_main::INPUT_A_m(0): { m: int32[9]; };
(in)  mpc_main::INPUT_B_b(0): { b: int32[3]; };
(out) mpc_main::1::OUTPUT_res(2): { res: int32[3]; };
(out) mpc_main#return_value(1): { res: int32[3]; };
Function call to "gaussj_D<int32[9],int32[3],int32[3]>"
(in)  gaussj_D<int32[9],int32[3],int32[3]>::m(0): int32[9];
(in)  gaussj_D<int32[9],int32[3],int32[3]>::b(0): int32[3];
(out) gaussj_D<int32[9],int32[3],int32[3]>::OUTPUT_res(0): int32[3];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "mpc_main"
Time limit: 9
Starting Bounded Model Checking
Converting function to circuit
(in)  mpc_main::INPUT_A_m(0): { m: int32[9]; };
(in)  mpc_main::INPUT_B_b(0): { b: int32[3]; };
(out) mpc_main::1::OUTPUT_res(2): { res: int32[3]; };
(out) mpc_main#return_value(1): { res: int32[3]; };
Function call to "gaussj_D<int32[9],int32[3],int32[3]>"
(in)  gaussj_D<int32[9],int32[3],int32[3]>::m(0): int32[9];
(in)  gaussj_D<int32[9],int32[3],int32[3]>::b(0): int32[3];
(out) gaussj_D<int32[9],int32[3],int32[3]>::OUTPUT_res(0): int32[3];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "mpc_main"
Time limit: 9
Starting Bounded Model Checking
Function call to "gaussj_D<int32[9],int32[3],int32[3]>"
(in)  m: int32[9];
(in)  b: int32[3];
(out) OUTPUT_res: int32[3];
(in)  INPUT_A_m: {m: int32[9]; }
(in)  INPUT_B_b: {b: int32[3]; }
(out) OUTPUT_res: {res: int32[3]; }
(out) return_value: {res: int32[3]; }
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "gaussj_D<int32[9],int32[3],int32[3]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.2 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 285 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.2 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 285 function gaussj_D thread 0
Converting function to circuit
(in)  gaussj_D<int32[9],int32[3],int32[3]>::b(0): int32[3];
(in)  gaussj_D<int32[9],int32[3],int32[3]>::m(0): int32[9];
(out) gaussj_D<int32[9],int32[3],int32[3]>::OUTPUT_res(1): int32[3];
Function call to "identity<int32[9]>"
(out) identity<int32[9]>::OUTPUT_m(0): int32[9];
Function call to "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>"
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m(0): int32[9];
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::b(0): int32[3];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::OUTPUT_m(0): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::OUTPUT_b(0): int32[3];
Function call to "fixedpt_div"
(in)  fixedpt_div::a(1): int32;
(in)  fixedpt_div::b(1): int32;
(out) fixedpt_div#return_value(1): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(1): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(3): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(5): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(7): int32;
Function call to "fixedpt_div"
(in)  fixedpt_div::a(1): int32;
(in)  fixedpt_div::b(1): int32;
(out) fixedpt_div#return_value(3): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(9): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(11): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(13): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(15): int32;
Function call to "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>"
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m(0): int32[9];
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::b(0): int32[3];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::OUTPUT_m(0): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::OUTPUT_b(0): int32[3];
Function call to "fixedpt_div"
(in)  fixedpt_div::a(1): int32;
(in)  fixedpt_div::b(1): int32;
(out) fixedpt_div#return_value(5): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(20): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(22): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(24): int32;
Function call to "solve_backtracking<int32[9],int32[3],int32[3]>"
(in)  solve_backtracking<int32[9],int32[3],int32[3]>::m(0): int32[9];
(in)  solve_backtracking<int32[9],int32[3],int32[3]>::b(0): int32[3];
(out) solve_backtracking<int32[9],int32[3],int32[3]>::OUTPUT_res(0): int32[3];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 2057, depth: 95
Boolean:    gates: 2057, Non-XOR gates: 341, Non-XOR depth: 31, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 2046, depth: 125
Boolean:    gates: 2046, Non-XOR gates: 341, Non-XOR depth: 31, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "gaussj_D<int32[9],int32[3],int32[3]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.2 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 285 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.2 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 285 function gaussj_D thread 0
Converting function to circuit
(in)  gaussj_D<int32[9],int32[3],int32[3]>::b(0): int32[3];
(in)  gaussj_D<int32[9],int32[3],int32[3]>::m(0): int32[9];
(out) gaussj_D<int32[9],int32[3],int32[3]>::OUTPUT_res(1): int32[3];
Function call to "identity<int32[9]>"
(out) identity<int32[9]>::OUTPUT_m(0): int32[9];
Function call to "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>"
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m(0): int32[9];
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::b(0): int32[3];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::OUTPUT_m(0): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::OUTPUT_b(0): int32[3];
Function call to "fixedpt_div"
(in)  fixedpt_div::a(1): int32;
(in)  fixedpt_div::b(1): int32;
(out) fixedpt_div#return_value(1): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(1): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(3): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(5): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(7): int32;
Function call to "fixedpt_div"
(in)  fixedpt_div::a(1): int32;
(in)  fixedpt_div::b(1): int32;
(out) fixedpt_div#return_value(3): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(9): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(11): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(13): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(15): int32;
Function call to "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>"
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m(0): int32[9];
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::b(0): int32[3];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::OUTPUT_m(0): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::OUTPUT_b(0): int32[3];
Function call to "fixedpt_div"
(in)  fixedpt_div::a(1): int32;
(in)  fixedpt_div::b(1): int32;
(out) fixedpt_div#return_value(5): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(20): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(22): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(24): int32;
Function call to "solve_backtracking<int32[9],int32[3],int32[3]>"
(in)  solve_backtracking<int32[9],int32[3],int32[3]>::m(0): int32[9];
(in)  solve_backtracking<int32[9],int32[3],int32[3]>::b(0): int32[3];
(out) solve_backtracking<int32[9],int32[3],int32[3]>::OUTPUT_res(0): int32[3];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #2.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #3.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #4.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #5.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #6.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #7.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #8.
Stopping minimization due to time out.
Total:      gates: 3685, depth: 12
Boolean:    gates: 3685, Non-XOR gates: 1749, Non-XOR depth: 5, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 3685, depth: 14
Boolean:    gates: 3685, Non-XOR gates: 1749, Non-XOR depth: 5, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "gaussj_D<int32[9],int32[3],int32[3]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.2 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 285 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 301 function gaussj_D thread 0
Unwinding loop gaussj_D.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 297 function gaussj_D thread 0
Unwinding loop gaussj_D.2 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 285 function gaussj_D thread 0
Function call to "identity<int32[9]>"
(out) OUTPUT_m: int32[9];
Function call to "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>"
(in)  m: int32[9];
(in)  b: int32[3];
(out) OUTPUT_m: int32[9];
(out) OUTPUT_b: int32[3];
Function call to "fixedpt_div"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_div"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>"
(in)  m: int32[9];
(in)  b: int32[3];
(out) OUTPUT_m: int32[9];
(out) OUTPUT_b: int32[3];
Function call to "fixedpt_div"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "fixedpt_mul"
(in)  a: int32;
(in)  b: int32;
(out) return_value: int32;
Function call to "solve_backtracking<int32[9],int32[3],int32[3]>"
(in)  m: int32[9];
(in)  b: int32[3];
(out) OUTPUT_res: int32[3];
(out) OUTPUT_res: int32[3]
(in)  b: int32[3]
(in)  m: int32[9]
Total:      gates: 11, depth: 1
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 11, Mul gates: 0, Mul depth: 0

Function "identity<int32[9]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
Converting function to circuit
(out) identity<int32[9]>::OUTPUT_m(9): int32[9];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "identity<int32[9]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
Converting function to circuit
(out) identity<int32[9]>::OUTPUT_m(9): int32[9];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "identity<int32[9]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
Unwinding loop identity.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 42 function identity thread 0
Unwinding loop identity.1 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 41 function identity thread 0
(out) OUTPUT_m: int32[9]
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop pivot_swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 153 function pivot_swap thread 0
Unwinding loop pivot_swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 153 function pivot_swap thread 0
Converting function to circuit
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::b(0): int32[3];
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m(0): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::OUTPUT_m(5): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::OUTPUT_b(5): int32[3];
Function call to "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>"
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::OUTPUT_m(0): int32[9];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::OUTPUT_v(0): int32[3];
Function call to "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>"
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::OUTPUT_m(0): int32[9];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::OUTPUT_v(0): int32[3];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 3778, depth: 198
Boolean:    gates: 3778, Non-XOR gates: 1216, Non-XOR depth: 66, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 2624, depth: 260
Boolean:    gates: 2624, Non-XOR gates: 832, Non-XOR depth: 66, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop pivot_swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 153 function pivot_swap thread 0
Unwinding loop pivot_swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 153 function pivot_swap thread 0
Converting function to circuit
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::b(0): int32[3];
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m(0): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::OUTPUT_m(5): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::OUTPUT_b(5): int32[3];
Function call to "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>"
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::OUTPUT_m(0): int32[9];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::OUTPUT_v(0): int32[3];
Function call to "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>"
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::OUTPUT_m(0): int32[9];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::OUTPUT_v(0): int32[3];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #2.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #3.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #4.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 3832, depth: 32
Boolean:    gates: 3832, Non-XOR gates: 1330, Non-XOR depth: 14, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 2680, depth: 34
Boolean:    gates: 2680, Non-XOR gates: 946, Non-XOR depth: 14, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>"
Time limit: 9
Starting Bounded Model Checking
!(m!0#0[0l] >= m!0#0[3l])
not
  * type: bool
  0: >=
      * type: bool
      * #source_location: 
        * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
        * line: 154
        * function: pivot_swap
        * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
      0: index
          * type: signedbv
              * width: 32
              * #typedef: DT
              * #c_type: signed_int
          0: symbol
              * type: array
                  * size: constant
                      * type: signedbv
                          * width: 64
                          * #c_type: signed_long_int
                      * value: 0000000000000000000000000000000000000000000000000000000000001001
                  * #source_location: 
                    * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                    * line: 18
                    * function: 
                    * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
                  0: signedbv
                      * width: 32
                      * #typedef: DT
                      * #c_type: signed_int
              * identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m!0#0
              * expression: symbol
                  * type: array
                      * size: constant
                          * type: signedbv
                              * width: 64
                              * #c_type: signed_long_int
                          * value: 0000000000000000000000000000000000000000000000000000000000001001
                      * #source_location: 
                        * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                        * line: 18
                        * function: 
                        * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
                      0: signedbv
                          * width: 32
                          * #typedef: DT
                          * #c_type: signed_int
                  * identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m
              * L0: 0
              * L2: 0
              * L1_object_identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m!0
              * #SSA_symbol: 1
          1: constant
              * type: signedbv
                  * width: 64
                  * #c_type: signed_long_int
              * value: 0000000000000000000000000000000000000000000000000000000000000000
      1: index
          * type: signedbv
              * width: 32
              * #typedef: DT
              * #c_type: signed_int
          0: symbol
              * type: array
                  * size: constant
                      * type: signedbv
                          * width: 64
                          * #c_type: signed_long_int
                      * value: 0000000000000000000000000000000000000000000000000000000000001001
                  * #source_location: 
                    * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                    * line: 18
                    * function: 
                    * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
                  0: signedbv
                      * width: 32
                      * #typedef: DT
                      * #c_type: signed_int
              * identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m!0#0
              * expression: symbol
                  * type: array
                      * size: constant
                          * type: signedbv
                              * width: 64
                              * #c_type: signed_long_int
                          * value: 0000000000000000000000000000000000000000000000000000000000001001
                      * #source_location: 
                        * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                        * line: 18
                        * function: 
                        * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
                      0: signedbv
                          * width: 32
                          * #typedef: DT
                          * #c_type: signed_int
                  * identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m
              * L0: 0
              * L2: 0
              * L1_object_identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>::m!0
              * #SSA_symbol: 1
          1: constant
              * type: signedbv
                  * width: 64
                  * #c_type: signed_long_int
              * value: 0000000000000000000000000000000000000000000000000000000000000011

Function "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop pivot_swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 153 function pivot_swap thread 0
Converting function to circuit
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::b(0): int32[3];
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m(0): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::OUTPUT_m(3): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::OUTPUT_b(3): int32[3];
Function call to "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>"
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::OUTPUT_m(0): int32[9];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::OUTPUT_v(0): int32[3];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 1313, depth: 99
Boolean:    gates: 1313, Non-XOR gates: 416, Non-XOR depth: 33, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 1312, depth: 130
Boolean:    gates: 1312, Non-XOR gates: 416, Non-XOR depth: 33, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop pivot_swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 153 function pivot_swap thread 0
Converting function to circuit
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::b(0): int32[3];
(in)  pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m(0): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::OUTPUT_m(3): int32[9];
(out) pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::OUTPUT_b(3): int32[3];
Function call to "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>"
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::OUTPUT_m(0): int32[9];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::OUTPUT_v(0): int32[3];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #2.
Approximating structural redundancy...
Done approximating structural redundancy!
Running SAT-based equivalence check
Running SAT-based equivalence check
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #3.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 1340, depth: 16
Boolean:    gates: 1340, Non-XOR gates: 473, Non-XOR depth: 7, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 1340, depth: 17
Boolean:    gates: 1340, Non-XOR gates: 473, Non-XOR depth: 7, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>"
Time limit: 9
Starting Bounded Model Checking
!(m!0#0[4l] >= m!0#0[7l])
not
  * type: bool
  0: >=
      * type: bool
      * #source_location: 
        * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
        * line: 154
        * function: pivot_swap
        * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
      0: index
          * type: signedbv
              * width: 32
              * #typedef: DT
              * #c_type: signed_int
          0: symbol
              * type: array
                  * size: constant
                      * type: signedbv
                          * width: 64
                          * #c_type: signed_long_int
                      * value: 0000000000000000000000000000000000000000000000000000000000001001
                  * #source_location: 
                    * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                    * line: 18
                    * function: 
                    * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
                  0: signedbv
                      * width: 32
                      * #typedef: DT
                      * #c_type: signed_int
              * identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m!0#0
              * expression: symbol
                  * type: array
                      * size: constant
                          * type: signedbv
                              * width: 64
                              * #c_type: signed_long_int
                          * value: 0000000000000000000000000000000000000000000000000000000000001001
                      * #source_location: 
                        * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                        * line: 18
                        * function: 
                        * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
                      0: signedbv
                          * width: 32
                          * #typedef: DT
                          * #c_type: signed_int
                  * identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m
              * L0: 0
              * L2: 0
              * L1_object_identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m!0
              * #SSA_symbol: 1
          1: constant
              * type: signedbv
                  * width: 64
                  * #c_type: signed_long_int
              * value: 0000000000000000000000000000000000000000000000000000000000000100
      1: index
          * type: signedbv
              * width: 32
              * #typedef: DT
              * #c_type: signed_int
          0: symbol
              * type: array
                  * size: constant
                      * type: signedbv
                          * width: 64
                          * #c_type: signed_long_int
                      * value: 0000000000000000000000000000000000000000000000000000000000001001
                  * #source_location: 
                    * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                    * line: 18
                    * function: 
                    * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
                  0: signedbv
                      * width: 32
                      * #typedef: DT
                      * #c_type: signed_int
              * identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m!0#0
              * expression: symbol
                  * type: array
                      * size: constant
                          * type: signedbv
                              * width: 64
                              * #c_type: signed_long_int
                          * value: 0000000000000000000000000000000000000000000000000000000000001001
                      * #source_location: 
                        * file: /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c
                        * line: 18
                        * function: 
                        * working_directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
                      0: signedbv
                          * width: 32
                          * #typedef: DT
                          * #c_type: signed_int
                  * identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m
              * L0: 0
              * L2: 0
              * L1_object_identifier: pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>::m!0
              * #SSA_symbol: 1
          1: constant
              * type: signedbv
                  * width: 64
                  * #c_type: signed_long_int
              * value: 0000000000000000000000000000000000000000000000000000000000000111

Function "solve_backtracking<int32[9],int32[3],int32[3]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop solve_backtracking.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 93 function solve_backtracking thread 0
Unwinding loop solve_backtracking.2 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 91 function solve_backtracking thread 0
Unwinding loop solve_backtracking.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 93 function solve_backtracking thread 0
Unwinding loop solve_backtracking.1 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 93 function solve_backtracking thread 0
Unwinding loop solve_backtracking.2 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 91 function solve_backtracking thread 0
Converting function to circuit
(in)  solve_backtracking<int32[9],int32[3],int32[3]>::b(0): int32[3];
(in)  solve_backtracking<int32[9],int32[3],int32[3]>::m(0): int32[9];
(out) solve_backtracking<int32[9],int32[3],int32[3]>::OUTPUT_res(6): int32[3];
Function call to "fixedpt_div"
(in)  fixedpt_div::a(1): int32;
(in)  fixedpt_div::b(1): int32;
(out) fixedpt_div#return_value(1): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(1): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(3): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(5): int32;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Stopping minimization due to time out.
Total:      gates: 35316, depth: 6519
Boolean:    gates: 35316, Non-XOR gates: 9109, Non-XOR depth: 2298, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 25984, depth: 6381
Boolean:    gates: 25984, Non-XOR gates: 8819, Non-XOR depth: 2236, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "solve_backtracking<int32[9],int32[3],int32[3]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop solve_backtracking.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 93 function solve_backtracking thread 0
Unwinding loop solve_backtracking.2 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 91 function solve_backtracking thread 0
Unwinding loop solve_backtracking.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 93 function solve_backtracking thread 0
Unwinding loop solve_backtracking.1 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 93 function solve_backtracking thread 0
Unwinding loop solve_backtracking.2 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 91 function solve_backtracking thread 0
Converting function to circuit
(in)  solve_backtracking<int32[9],int32[3],int32[3]>::b(0): int32[3];
(in)  solve_backtracking<int32[9],int32[3],int32[3]>::m(0): int32[9];
(out) solve_backtracking<int32[9],int32[3],int32[3]>::OUTPUT_res(6): int32[3];
Function call to "fixedpt_div"
(in)  fixedpt_div::a(1): int32;
(in)  fixedpt_div::b(1): int32;
(out) fixedpt_div#return_value(1): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(1): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(3): int32;
Function call to "fixedpt_mul"
(in)  fixedpt_mul::a(1): int32;
(in)  fixedpt_mul::b(1): int32;
(out) fixedpt_mul#return_value(5): int32;
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Stopping minimization due to time out.
Total:      gates: 36089, depth: 6438
Boolean:    gates: 36089, Non-XOR gates: 9825, Non-XOR depth: 2217, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 27193, depth: 6371
Boolean:    gates: 27193, Non-XOR gates: 9527, Non-XOR depth: 2187, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "solve_backtracking<int32[9],int32[3],int32[3]>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop solve_backtracking.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 87 function solve_backtracking thread 0
Unwinding loop solve_backtracking.1 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 93 function solve_backtracking thread 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Converting function to circuit
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::OUTPUT_v(1): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::OUTPUT_m(1): int32[9];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Converting function to circuit
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::OUTPUT_v(1): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>::OUTPUT_m(1): int32[9];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
(out) OUTPUT_m: int32[9]
(out) OUTPUT_v: int32[3]
(in)  m: int32[9]
(in)  v: int32[3]
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Converting function to circuit
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::OUTPUT_v(1): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::OUTPUT_m(1): int32[9];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Converting function to circuit
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::OUTPUT_v(1): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>::OUTPUT_m(1): int32[9];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 3 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
(out) OUTPUT_m: int32[9]
(out) OUTPUT_v: int32[3]
(in)  m: int32[9]
(in)  v: int32[3]
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Converting function to circuit
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::OUTPUT_v(1): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::OUTPUT_m(1): int32[9];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Converting function to circuit
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::m(0): int32[9];
(in)  swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::v(0): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::OUTPUT_v(1): int32[3];
(out) swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>::OUTPUT_m(1): int32[9];
Start circuit rewriting...
Done circuit rewriting.
Start circuit rewriting...
Done circuit rewriting.
SAT-based minimization iteration #1.
Approximating structural redundancy...
Done approximating structural redundancy!
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
After minimization:
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0

Function "swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>"
Time limit: 9
Starting Bounded Model Checking
Unwinding loop swap.0 iteration 1 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
Unwinding loop swap.0 iteration 2 file /home/ubuntu/circ_benchmarks/modules/HyCC/examples/benchmarks/gauss/gauss.c line 134 function swap thread 0
(out) OUTPUT_m: int32[9]
(out) OUTPUT_v: int32[3]
(in)  m: int32[9]
(in)  v: int32[3]
Total:      gates: 0, depth: 0
Boolean:    gates: 0, Non-XOR gates: 0, Non-XOR depth: 0, LUTs: 0
Arithmetic: gates: 0, Mul gates: 0, Mul depth: 0
LOG: Compile time: 101.264

LOG: Time / Memory: 101.30 seconds 878408 kB

LOG: ====================================

LOG: MODE: bundle
HyCC Module Bundle Generator v0.2
Directory: /home/ubuntu/circ_benchmarks/hycc_circuit_dir/hycc_gauss_mt-9_args---all-variants_cm-hycc
(ignoring fixedpt_mul_inner@bool_size.stats)
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>@arith.circ
found fixedpt_mul@bool_depth.circ
(ignoring fixedpt_mul_inner@bool_depth.stats)
found gaussj_D<int32[9],int32[3],int32[3]>@bool_depth.circ
found fixedpt_div@bool_size.circ
(ignoring gaussj_D<int32[9],int32[3],int32[3]>@bool_depth.stats)
found mpc_main@bool_size.circ
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>@bool_depth.stats)
found pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>@bool_size.circ
(ignoring pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>@bool_depth.stats)
(ignoring yaohybrid.cmb)
(ignoring fixedpt_div@bool_size.stats)
found fixedpt_mul_inner@bool_size.circ
(ignoring gaussj_D<int32[9],int32[3],int32[3]>@arith.stats)
found identity<int32[9]>@bool_size.circ
found mpc_main@bool_depth.circ
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>@bool_depth.stats)
found gaussj_D<int32[9],int32[3],int32[3]>@arith.circ
(ignoring gmwhybrid.cmb)
(ignoring solve_backtracking<int32[9],int32[3],int32[3]>@bool_depth.stats)
(ignoring identity<int32[9]>@bool_depth.stats)
found abs@bool_depth.circ
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>@bool_depth.circ
(ignoring ps_optimized.cmb)
found fixedpt_mul_inner@bool_depth.circ
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>@bool_depth.circ
(ignoring all.cmb)
found abs@bool_size.circ
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>@bool_size.stats)
(ignoring pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>@bool_depth.stats)
(ignoring fixedpt_mul@bool_size.stats)
(ignoring mpc_main@arith.stats)
found solve_backtracking<int32[9],int32[3],int32[3]>@bool_depth.circ
(ignoring identity<int32[9]>@bool_size.stats)
found fixedpt_div@bool_depth.circ
found identity<int32[9]>@arith.circ
found pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>@bool_size.circ
(ignoring abs@bool_depth.stats)
(ignoring abs@bool_size.stats)
(ignoring pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>@bool_size.stats)
found gaussj_D<int32[9],int32[3],int32[3]>@bool_size.circ
(ignoring mpc_main@bool_size.stats)
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>@bool_depth.stats)
(ignoring gaussj_D<int32[9],int32[3],int32[3]>@bool_size.stats)
(ignoring fixedpt_mul@bool_depth.stats)
(ignoring identity<int32[9]>@arith.stats)
(ignoring yaoonly.cmb)
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>@arith.stats)
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>@bool_size.circ
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>@arith.stats)
(ignoring fixedpt_div@bool_depth.stats)
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>@arith.stats)
found identity<int32[9]>@bool_depth.circ
found pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>@bool_depth.circ
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>@bool_size.stats)
(ignoring pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<0>,int32<3>>@bool_size.stats)
(ignoring gmwonly.cmb)
(ignoring mpc_main@bool_depth.stats)
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>@bool_depth.circ
(ignoring solve_backtracking<int32[9],int32[3],int32[3]>@bool_size.stats)
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<2>>@arith.circ
found fixedpt_mul@bool_size.circ
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>@arith.circ
found solve_backtracking<int32[9],int32[3],int32[3]>@bool_size.circ
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>@bool_size.circ
(ignoring graph.dot)
found pivot_swap<int32[9],int32[3],int32[9],int32[3],int32<1>,int32<3>>@bool_depth.circ
found mpc_main@arith.circ
(ignoring swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<1>,int32<2>>@bool_size.stats)
found swap<int32[9],int32[3],int32[9],int32[3],int32<3>,int32<0>,int32<1>>@bool_size.circ

LOG: Time / Memory: 0.02 seconds 10056 kB
